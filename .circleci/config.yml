---
version: 2.1

orbs:
  win: circleci/windows@2.2.0
  slack: circleci/slack@3.4.2
  npm-release-management: salesforce/npm-release-management@2.0.0

_refs:
  defaults: &defaults
    working_directory: ~/cli
    docker:
      - image: node:12
  ssh-config: &ssh-config
    fingerprints:
      - 'b1:50:d4:d9:01:2c:7c:8b:a0:e3:3c:c1:f8:a4:41:f0'
  restore_cache: &restore_cache
    keys:
      - v1-npm-{{checksum ".circleci/config.yml"}}-{{checksum "yarn.lock"}}
      - v1-npm-{{checksum ".circleci/config.yml"}}
  lint: &lint
    name: Lint source files
    command: yarn lint
  gh-config: &gh-config
    name: Configuring GitHub
    command: |
      git config credential.helper 'cache --timeout=120'
      git config user.email "$GH_EMAIL"
      git config user.name "Release Bot"
  install: &install
    name: Install dependencies
    command: |
      yarn --version
      node --version
      yarn
  build: &build
    name: Build project
    command: yarn build
  test: &test
    name: Run tests
    command: yarn test

commands:
  setup-publish:
    steps:
      - slack/notify:
          channel: 'pdt_releases'
          color: '#FFDEAD'
          message: 'Starting Publish for Apex Library & Plugin'
      - add_ssh_keys: *ssh-config
      - checkout
      - restore_cache: *restore_cache
      - run: *gh-config
      - run: *install
      - run: *build
      - run:
          working_directory: ./packages/plugin-apex
          command: yarn manifest:generate
      - run: yarn package
  release-management-commands:
    steps:
      - npm-release-management/sign
      - npm-release-management/publish:
          use_tarfile: true
      - npm-release-management/verify-signed-package
      - npm-release-management/create-git-tag


parameters:
  publish:
    type: boolean
    default: false
  publish-type:
    type: string
    default: patch

jobs:
  node-latest: &node-test
    docker:
      - image: node:latest
    working_directory: ~/cli
    steps:
      - checkout
      - restore_cache: *restore_cache
      - run: *install
      - run: *lint
      - run: *build
      - run: *test
  node-12:
    <<: *node-test
    docker:
      - image: node:12
  node-10:
    <<: *node-test
    docker:
      - image: node:10
  cache:
    <<: *node-test
    steps:
      - checkout
      - run: *install
      - save_cache:
          key: v1-npm-{{checksum ".circleci/config.yml"}}-{{checksum "yarn.lock"}}
          paths:
            - ~/cli/node_modules
            - /usr/local/share/.cache/yarn
            - /usr/local/share/.config/yarn
  run-win-tests:
    description: 'Run tests on Windows'
    executor: win/default
    steps:
      - run: git config --global core.autocrlf false
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-win1-{{checksum ".circleci/config.yml"}}-{{checksum "yarn.lock"}}
            # if cache for exact version of 'package.json' is not present, then load the most recent cache
            - dependency-cache-win1-
      - run: *install
      - save_cache:
          key: dependency-cache-win1-{{checksum ".circleci/config.yml"}}-{{checksum "yarn.lock"}}
          paths:
            - node_modules
      - run: *lint
      - run: *build
      - run: *test
  prepublish:
    <<: *defaults
    steps:
      - setup-publish
      - run:
          name: Bump package version
          command: |
            yarn bump-versions << pipeline.parameters.publish-type >>
            git add .
            export RELEASE_TAG="$(node -pe "require('./lerna.json').version")"
            echo "export RELEASE_VERSION=$RELEASE_TAG" >> $BASH_ENV
            source $BASH_ENV
            git commit -m "Updated version $RELEASE_TAG"
      - persist_to_workspace:
          root: .
          paths:
              - .git
              - packages/apex-node/package.json
              - packages/apex-node/salesforce-apex-node-$RELEASE_TAG.tgz
              - packages/plugin-apex/package.json
              - packages/plugin-apex/bin
              - packages/plugin-apex/lib
              - packages/plugin-apex/oclif.manifest.json
              - packages/plugin-apex/messages
              - packages/plugin-apex/README.md
              - packages/plugin-apex/yarn.lock
              - packages/plugin-apex/.gitignore
  publish-apex-node:
    <<: *defaults
    working_directory: ~/cli/packages/apex-node
    steps:
      - attach_workspace:
          at: ~/cli    
      - npm-release-management/publish:
          use_tarfile: true
      - run: git push origin main
      - run:
          name: Tag the release and push to repo
          command: |
            export RELEASE_TAG="$(node -pe "require('./packages/apex-node/package.json').version")"
            git tag v${RELEASE_VERSION}
            git push --tags
  publish-plugin-apex:
    <<: *defaults
    working_directory: ~/cli/packages/plugin-apex
    steps:
      - attach_workspace:
          at: ~/cli
      - release-management-commands     
      - run: git push origin main
      - slack/notify:
          channel: 'pdt_releases'
          color: '#9bcd9b'
          message: 'Apex Plugin v${RELEASE_VERSION} has been published to npm'
      - slack/status:
          channel: 'pdt_releases'
          fail_only: true

workflows:
  version: 2.1
  
  commit-workflow:
    unless: << pipeline.parameters.publish >>
    jobs:
      - node-latest
      - node-12
      - node-10
      - cache:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - run-win-tests
  
  publish-workflow:
    when: << pipeline.parameters.publish >>
    jobs:
      - slack/approval-notification:
          message: Pending Approval for Publish of Apex Plugin
          channel: 'pdt_releases'
          color: '#0E1111'
      - node-latest
      - node-12
      - node-10
      - run-win-tests
      - hold: # Requires manual approval in Circle Ci
          type: approval
      - prepublish:
          requires:
              - hold
      - publish-apex-node:
          filters:
            branches:
              only:
                - main
          requires:
              - run-win-tests
              - node-latest
              - node-12
              - node-10
              - hold
              - prepublish
      - publish-plugin-apex:
          filters:
            branches:
              only:
                - main
          requires:
              - run-win-tests
              - node-latest
              - node-12
              - node-10
              - hold
              - prepublish
              - publish-apex-node
